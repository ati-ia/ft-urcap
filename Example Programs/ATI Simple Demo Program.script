def ATI_Simple_Demo_Program():
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.56, [0.0, 0.0, 0.0])
  step_count_5c5af8da_d172_41df_a3ae_c6c22e09a259 = 0.0
  thread Step_Counter_Thread_dfbb4165_a0e9_43fe_8a83_318f448623a1():
    while (True):
      step_count_5c5af8da_d172_41df_a3ae_c6c22e09a259 = step_count_5c5af8da_d172_41df_a3ae_c6c22e09a259 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_dfbb4165_a0e9_43fe_8a83_318f448623a1()
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  global Cylinder_in_R=p[-0.2542285407859815,-0.48732586605322137,0.15940956830083072,2.839718707316,-0.6491551299787194,-0.08545926282024187]
  # begin: URCap Installation Node
  #   Source: ATI Axia Force/Torque Sensor, 2.5.23, ATI Industrial Automation
  #   Type: F/T Sensor
  global ati_ftsensor=rpc_factory("xmlrpc", "http://127.0.0.1:47405/RPC2")
  sensor_address = "192.168.137.15"
  sensor_baud = "1000000"
  sensorMass = 0.56
  sensorOffset = [0.0, 0.0, 0.042]
  sensorCOG = [0.0, 0.0, 0.0]
  # end: URCap Installation Node
  $ 1 "BeforeStart"
  $ 2 "Move to Initial start position"
  $ 3 "MoveJ"
  $ 4 "'CAUTION: check reachability or edit Waypoint before running Demo!'"
  # 'CAUTION: check reachability or edit Waypoint before running Demo!'
  $ 5 "Start" "breakAfter"
  movej([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=1.3962634015954636, v=1.0471975511965976)
  # begin: URCap Program Node
  #   Source: ATI Axia Force/Torque Sensor, 2.5.23, ATI Industrial Automation
  #   Type: F/T Sensor Command
  $ 6 "FT Sensor: Enabled"
  sensor_address = ati_ftsensor.set_sensor_address(sensor_address, sensor_baud)
  if (sensor_address == "") :
  popup("Sensor not reachable. Check tool communication and tool power.", title = "Sensor Disconnected", error = True, blocking = True)
  end
  if (not ati_ftsensor.is_running()):
  ati_ftsensor.start_streaming()
  end
  while (not ati_ftsensor.is_running()):
  sleep(0.1)
  end
  sleep(0.5)
  ati_ftsensor.override_communication_error_stop(False)
  ft_rtde_input_enable(True, sensor_mass = sensorMass, sensor_measuring_offset = sensorOffset, sensor_cog = sensorCOG)
  # end: URCap Program Node
  $ 7 "'Initialize variable for use in thread'"
  # 'Initialize variable for use in thread'
  $ 8 "ATI_FT_rawdata≔ati_ftsensor.get_raw_ft()"
  global ATI_FT_rawdata=ati_ftsensor.get_raw_ft()
  $ 31 "Thread_1"
  thread Thread_1():
    while (True):
      $ 32 "'MONITOR THIS DATA DURING PROGRAM FROM 'Variables' TAB'"
      # 'MONITOR THIS DATA DURING PROGRAM FROM "Variables" TAB'
      $ 33 "Wait: 0.01"
      sleep(0.01)
      $ 34 "'Read sensor F/T Data using F/T URCap command, & assign it to a variable.'"
      # 'Read sensor F/T Data using F/T URCap command, & assign it to a variable.'
      $ 35 "'This is the raw data directly from the sensor, in the sensor coordinate frame.'"
      # 'This is the raw data directly from the sensor, in the sensor coordinate frame.'
      $ 36 "'With every loop of the thread, update the raw F/T data reading.'"
      # 'With every loop of the thread, update the raw F/T data reading.'
      $ 37 "ATI_FT_rawdata≔ati_ftsensor.get_raw_ft()"
      global ATI_FT_rawdata=ati_ftsensor.get_raw_ft()
      $ 38 "'Fz is the 3rd element of the ATI_FT_data variable.'"
      # 'Fz is the 3rd element of the ATI_FT_data variable.'
      $ 39 "'NOTE: Pressing sensor in Z causes a -Z force (if no sensor Tool Transform applied)'"
      # 'NOTE: Pressing sensor in Z causes a -Z force (if no sensor Tool Transform applied)'
      $ 40 "ATI_FT_Fz≔ATI_FT_rawdata[2]"
      global ATI_FT_Fz=ATI_FT_rawdata[2]
      $ 41 "'F/T sensor data can also be read from native UR commands.'"
      # 'F/T sensor data can also be read from native UR commands.'
      $ 42 "'Data read from UR commands will have transformations applied.'"
      # 'Data read from UR commands will have transformations applied.'
      $ 43 "'(it is in robot base frame, not in the sensor coordinate frame).'"
      # '(it is in robot base frame, not in the sensor coordinate frame).'
      $ 44 "' UR Command get_tcp_force() gives TCP force in coordinate frame of robot base.'"
      # ' UR Command get_tcp_force() gives TCP force in coordinate frame of robot base.'
      $ 45 "FTinBaseFrame≔get_tcp_force()"
      global FTinBaseFrame= get_tcp_force ()
      $ 46 "'UR command force() gives the Norm of get_tcp_force().'"
      # 'UR command force() gives the Norm of get_tcp_force().'
      $ 47 "ForceNorm≔force()"
      global ForceNorm= force ()
    end
  end
  threadId_Thread_1 = run Thread_1()
  while (True):
    $ 9 "Robot Program"
    $ 10 "Bias the sensor"
    $ 11 "Wait: 0.5"
    sleep(0.5)
    # begin: URCap Program Node
    #   Source: ATI Axia Force/Torque Sensor, 2.5.23, ATI Industrial Automation
    #   Type: F/T Sensor Command
    $ 12 "FT Sensor: Bias"
    sensor_address = ati_ftsensor.set_sensor_address(sensor_address, sensor_baud)
    if (sensor_address == "") :
    popup("Sensor not reachable. Check tool communication and tool power.", title = "Sensor Disconnected", error = True, blocking = True)
    end
    ati_ftsensor.bias_sensor()
    # end: URCap Program Node
    $ 13 "Wait: 0.5"
    sleep(0.5)
    $ 14 "'This Demo program shows multiple ways to read F/T data for a 'Force Search' in Z direction'"
    # 'This Demo program shows multiple ways to read F/T data for a "Force Search" in Z direction'
    $ 15 "METHOD 1: Read F/T data via native UR command"
    $ 16 "MoveL"
    $ 17 "'Move down until the tool touches a surface'"
    # 'Move down until the tool touches a surface'
    $ 18 "If force()<2"
    global thread_flag_18=0
    thread Thread_if_18():
      $ 19 "RelativeMotionZ" "breakAfter"
      movel(pose_add(get_forward_kin(), pose_sub(p[-.100895358710, -.399447902864, -.109904714255, -.003451212682, -3.138299351321, -.000360953878], p[-.099537247807, -.399332435006, .353883256374, .002737994117, -3.138372942114, -.000848275479])), a=0.2, v=0.04)
      thread_flag_18 = 1
    end
    if ( force ()<2):
      global thread_handler_18=run Thread_if_18()
      while (thread_flag_18 == 0):
        if not( force ()<2):
          kill thread_handler_18
          thread_flag_18 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_18 = 2
    end
    $ 20 "'Wait, then return to the start position'"
    # 'Wait, then return to the start position'
    $ 21 "Wait: 1.0"
    sleep(1.0)
    $ 22 "Start" "breakAfter"
    movel([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=0.2, v=0.04)
    $ 23 "METHOD 2: Read raw F/T data via ATI F/T URCap command"
    $ 24 "MoveL"
    $ 25 "'Move down until the tool touches a surface'"
    # 'Move down until the tool touches a surface'
    $ 26 "If ATI_FT_Fz>-2"
    global thread_flag_26=0
    thread Thread_if_26():
      $ 27 "RelativeMotionZ" "breakAfter"
      movel(pose_add(get_forward_kin(), pose_sub(p[-.100895358710, -.399447902864, -.109904714255, -.003451212682, -3.138299351321, -.000360953878], p[-.099537247807, -.399332435006, .353883256374, .002737994117, -3.138372942114, -.000848275479])), a=0.2, v=0.04)
      thread_flag_26 = 1
    end
    if (ATI_FT_Fz>-2):
      global thread_handler_26=run Thread_if_26()
      while (thread_flag_26 == 0):
        if not(ATI_FT_Fz>-2):
          kill thread_handler_26
          thread_flag_26 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_26 = 2
    end
    $ 28 "'Wait, then return to the start position'"
    # 'Wait, then return to the start position'
    $ 29 "Wait: 1.0"
    sleep(1.0)
    $ 30 "Start" "breakAfter"
    movel([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=0.2, v=0.04)
  end
end
