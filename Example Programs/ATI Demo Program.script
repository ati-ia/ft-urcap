def ATI_Demo_Program():
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.56, [0.0, 0.0, 0.0])
  step_count_5c5af8da_d172_41df_a3ae_c6c22e09a259 = 0.0
  thread Step_Counter_Thread_dfbb4165_a0e9_43fe_8a83_318f448623a1():
    while (True):
      step_count_5c5af8da_d172_41df_a3ae_c6c22e09a259 = step_count_5c5af8da_d172_41df_a3ae_c6c22e09a259 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_dfbb4165_a0e9_43fe_8a83_318f448623a1()
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  global Cylinder_in_R=p[-0.2542285407859815,-0.48732586605322137,0.15940956830083072,2.839718707316,-0.6491551299787194,-0.08545926282024187]
  # begin: URCap Installation Node
  #   Source: ATI Axia Force/Torque Sensor, 2.5.23, ATI Industrial Automation
  #   Type: F/T Sensor
  global ati_ftsensor=rpc_factory("xmlrpc", "http://127.0.0.1:47405/RPC2")
  sensor_address = "192.168.137.15"
  sensor_baud = "1000000"
  sensorMass = 0.56
  sensorOffset = [0.0, 0.0, 0.042]
  sensorCOG = [0.0, 0.0, 0.0]
  # end: URCap Installation Node
  $ 1 "BeforeStart"
  $ 2 "Move to Initial start position"
  $ 3 "MoveJ"
  $ 4 "'CAUTION: check reachability or edit Waypoint before running Demo!'"
  # 'CAUTION: check reachability or edit Waypoint before running Demo!'
  $ 5 "Start" "breakAfter"
  movej([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=1.3962634015954636, v=1.0471975511965976)
  # begin: URCap Program Node
  #   Source: ATI Axia Force/Torque Sensor, 2.5.23, ATI Industrial Automation
  #   Type: F/T Sensor Command
  $ 6 "FT Sensor: Enabled"
  sensor_address = ati_ftsensor.set_sensor_address(sensor_address, sensor_baud)
  if (sensor_address == "") :
  popup("Sensor not reachable. Check tool communication and tool power.", title = "Sensor Disconnected", error = True, blocking = True)
  end
  if (not ati_ftsensor.is_running()):
  ati_ftsensor.start_streaming()
  end
  while (not ati_ftsensor.is_running()):
  sleep(0.1)
  end
  sleep(0.5)
  ati_ftsensor.override_communication_error_stop(False)
  ft_rtde_input_enable(True, sensor_mass = sensorMass, sensor_measuring_offset = sensorOffset, sensor_cog = sensorCOG)
  # end: URCap Program Node
  $ 7 "'Initialize variable for use in Thread:'"
  # 'Initialize variable for use in Thread:'
  $ 8 "'In this example, we name the variable ATI_FT_data.'"
  # 'In this example, we name the variable ATI_FT_data.'
  $ 9 "ATI_FT_rawdata≔ati_ftsensor.get_raw_ft()"
  global ATI_FT_rawdata=ati_ftsensor.get_raw_ft()
  $ 96 "Thread_1"
  thread Thread_1():
    while (True):
      $ 97 "'MONITOR THIS DATA DURING PROGRAM FROM 'Variables' TAB'"
      # 'MONITOR THIS DATA DURING PROGRAM FROM "Variables" TAB'
      $ 98 "Wait: 0.01"
      sleep(0.01)
      $ 99 "'Read sensor F/T Data using F/T URCap command, & assign it to a variable.'"
      # 'Read sensor F/T Data using F/T URCap command, & assign it to a variable.'
      $ 100 "'This is the raw data directly from the sensor, in the sensor coordinate frame.'"
      # 'This is the raw data directly from the sensor, in the sensor coordinate frame.'
      $ 101 "'With every loop of the thread, update the raw F/T data reading.'"
      # 'With every loop of the thread, update the raw F/T data reading.'
      $ 102 "ATI_FT_rawdata≔ati_ftsensor.get_raw_ft()"
      global ATI_FT_rawdata=ati_ftsensor.get_raw_ft()
      $ 103 "'Fz is the 3rd element of the ATI_FT_data variable.'"
      # 'Fz is the 3rd element of the ATI_FT_data variable.'
      $ 104 "'NOTE: Pressing sensor in Z causes a -Z force (if no sensor Tool Transform applied)'"
      # 'NOTE: Pressing sensor in Z causes a -Z force (if no sensor Tool Transform applied)'
      $ 105 "ATI_FT_Fz≔ATI_FT_rawdata[2]"
      global ATI_FT_Fz=ATI_FT_rawdata[2]
      $ 106 "'F/T sensor data can also be read from native UR commands.'"
      # 'F/T sensor data can also be read from native UR commands.'
      $ 107 "'Data read from UR commands will have transformations applied.'"
      # 'Data read from UR commands will have transformations applied.'
      $ 108 "'(it is in robot base frame, not in the sensor coordinate frame).'"
      # '(it is in robot base frame, not in the sensor coordinate frame).'
      $ 109 "' UR Command get_tcp_force() gives TCP force in coordinate frame of robot base.'"
      # ' UR Command get_tcp_force() gives TCP force in coordinate frame of robot base.'
      $ 110 "FTinBaseFrame≔get_tcp_force()"
      global FTinBaseFrame= get_tcp_force ()
      $ 111 "'UR command force() gives the Norm of get_tcp_force().'"
      # 'UR command force() gives the Norm of get_tcp_force().'
      $ 112 "ForceNorm≔force()"
      global ForceNorm= force ()
      $ 113 "Get magnitude of force in just the X-Y plane, accounting for friction of tool"
      $ 114 "xyPlaneForce≔sqrt(pow(FTinBaseFrame[0], 2) + pow(FTinBaseFrame[1], 2)) - 0.3*ForceNorm"
      global xyPlaneForce=sqrt(pow(FTinBaseFrame[0], 2) + pow(FTinBaseFrame[1], 2)) - 0.3*ForceNorm
    end
  end
  threadId_Thread_1 = run Thread_1()
  while (True):
    $ 10 "Robot Program"
    $ 11 "Bias the sensor"
    $ 12 "Wait: 0.5"
    sleep(0.5)
    # begin: URCap Program Node
    #   Source: ATI Axia Force/Torque Sensor, 2.5.23, ATI Industrial Automation
    #   Type: F/T Sensor Command
    $ 13 "FT Sensor: Bias"
    sensor_address = ati_ftsensor.set_sensor_address(sensor_address, sensor_baud)
    if (sensor_address == "") :
    popup("Sensor not reachable. Check tool communication and tool power.", title = "Sensor Disconnected", error = True, blocking = True)
    end
    ati_ftsensor.bias_sensor()
    # end: URCap Program Node
    $ 14 "Wait: 0.5"
    sleep(0.5)
    $ 15 "'This Demo program shows multiple ways to search & monitor forces (without UR Force Mode)'"
    # 'This Demo program shows multiple ways to search & monitor forces (without UR Force Mode)'
    $ 16 "'and program offset motion with UR Force Mode.'"
    # 'and program offset motion with UR Force Mode.'
    $ 17 "METHOD 1"
    $ 18 "Move down until the tool touches a surface"
    $ 19 "'Monitor Norm of Forces (in robot base coordinate frame)'"
    # 'Monitor Norm of Forces (in robot base coordinate frame)'
    $ 20 "MoveL"
    $ 21 "If ForceNorm<2"
    global thread_flag_21=0
    thread Thread_if_21():
      $ 22 "RelativeMotionZ" "breakAfter"
      movel(pose_add(get_forward_kin(), pose_sub(p[-.100895358710, -.399447902864, -.109904714255, -.003451212682, -3.138299351321, -.000360953878], p[-.099537247807, -.399332435006, .353883256374, .002737994117, -3.138372942114, -.000848275479])), a=0.2, v=0.04)
      thread_flag_21 = 1
    end
    if (ForceNorm<2):
      global thread_handler_21=run Thread_if_21()
      while (thread_flag_21 == 0):
        if not(ForceNorm<2):
          kill thread_handler_21
          thread_flag_21 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_21 = 2
    end
    $ 23 "Move across the surface while applying 10N of force"
    $ 24 "'Use 'Simple' type UR Force Control'"
    # 'Use "Simple" type UR Force Control'
    $ 25 "Force"
    sleep(0.02)
    force_mode(tool_pose(), [0, 0, 1, 0, 0, 0], [0.0, 0.0, 10.0, 0.0, 0.0, 0.0], 2, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
    $ 26 "MoveL" "noBreak"
    $ 27 "Wait: 1.0" "noBreak"
    sleep(1.0)
    $ 28 "(Optional IF) Stop if the tool encounters too much resistance or hits wall." "noBreak"
    $ 29 "If xyPlaneForce < 10" "noBreak"
    global thread_flag_29=0
    thread Thread_if_29():
      $ 30 "RelativeMotionY" "noBreak"
      movel(pose_add(get_forward_kin(), pose_sub(p[.436379622645, .579622290088, .355372356098, 3.139904977212, -.047154280323, -.005127828988], p[-.436359442327, .579695814351, .355249805337, 3.139879080663, -.047187252950, -.005446656779])), a=0.025, v=0.04)
      thread_flag_29 = 1
    end
    if (xyPlaneForce < 10):
      global thread_handler_29=run Thread_if_29()
      while (thread_flag_29 == 0):
        if not(xyPlaneForce < 10):
          kill thread_handler_29
          thread_flag_29 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_29 = 2
    end
    end_force_mode()
    stopl(5.0)
    $ 31 "Reset to a start position"
    $ 32 "MoveL"
    $ 33 "Up" "breakAfter"
    movel(pose_add(get_forward_kin(), pose_sub(p[-.436336185337, .579673257663, .343364995505, 3.139979842869, -.047175057684, -.005647957901], p[-.436390459671, .579650792013, .262908481914, 3.139937120188, -.046979815582, -.005524822520])), a=1.2, v=0.25)
    $ 35 "Start" "breakAfter"
    movel([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=1.2, v=0.25)
    $ 36 "Reset to a start position"
    $ 37 "MoveL"
    $ 38 "Start" "breakAfter"
    movel([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=1.2, v=0.25)
    $ 39 "METHOD 2"
    $ 40 "Move down until the tool touches a surface"
    $ 41 "'Monitor Norm of Forces (in robot base coordinate frame)'"
    # 'Monitor Norm of Forces (in robot base coordinate frame)'
    $ 42 "MoveL"
    $ 43 "If ForceNorm<2"
    global thread_flag_43=0
    thread Thread_if_43():
      $ 44 "RelativeMotionZ" "breakAfter"
      movel(pose_add(get_forward_kin(), pose_sub(p[-.100895358710, -.399447902864, -.109904714255, -.003451212682, -3.138299351321, -.000360953878], p[-.099537247807, -.399332435006, .353883256374, .002737994117, -3.138372942114, -.000848275479])), a=0.2, v=0.04)
      thread_flag_43 = 1
    end
    if (ForceNorm<2):
      global thread_handler_43=run Thread_if_43()
      while (thread_flag_43 == 0):
        if not(ForceNorm<2):
          kill thread_handler_43
          thread_flag_43 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_43 = 2
    end
    $ 45 "Move across the surface while applying 10N of down force & 0N of side force"
    $ 46 "'Use 'Motion' type UR Force Control with only Z compliance'"
    # 'Use "Motion" type UR Force Control with only Z compliance'
    $ 47 "Force"
    sleep(0.02)
    force_mode(tool_pose(), [0, 0, 1, 0, 0, 0], [0.0, 0.0, 10.0, 0.0, 0.0, 0.0], 3, [0.1, 0.1, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
    $ 48 "MoveL" "noBreak"
    $ 49 "Wait: 1.0" "noBreak"
    sleep(1.0)
    $ 50 "(Optional IF) Stop if the tool encounters too much resistance or hits wall." "noBreak"
    $ 51 "If xyPlaneForce < 10" "noBreak"
    global thread_flag_51=0
    thread Thread_if_51():
      $ 52 "RelativeMotionY" "noBreak"
      movel(pose_add(get_forward_kin(), pose_sub(p[.436379622645, .579622290088, .355372356098, 3.139904977212, -.047154280323, -.005127828988], p[-.436359442327, .579695814351, .355249805337, 3.139879080663, -.047187252950, -.005446656779])), a=0.025, v=0.04)
      thread_flag_51 = 1
    end
    if (xyPlaneForce < 10):
      global thread_handler_51=run Thread_if_51()
      while (thread_flag_51 == 0):
        if not(xyPlaneForce < 10):
          kill thread_handler_51
          thread_flag_51 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_51 = 2
    end
    end_force_mode()
    stopl(5.0)
    $ 53 "Reset to a start position"
    $ 54 "MoveL"
    $ 55 "Up" "breakAfter"
    movel(pose_add(get_forward_kin(), pose_sub(p[-.436336185337, .579673257663, .343364995505, 3.139979842869, -.047175057684, -.005647957901], p[-.436390459671, .579650792013, .262908481914, 3.139937120188, -.046979815582, -.005524822520])), a=1.2, v=0.25)
    $ 57 "Start" "breakAfter"
    movel([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=1.2, v=0.25)
    $ 58 "Reset to a start position"
    $ 59 "MoveL"
    $ 60 "Start" "breakAfter"
    movel([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=1.2, v=0.25)
    $ 61 "METHOD 3"
    $ 62 "Move down until the tool touches a surface"
    $ 63 "'Monitor Norm of Forces (in robot base coordinate frame)'"
    # 'Monitor Norm of Forces (in robot base coordinate frame)'
    $ 64 "MoveL"
    $ 65 "If ForceNorm<2"
    global thread_flag_65=0
    thread Thread_if_65():
      $ 66 "RelativeMotionZ" "breakAfter"
      movel(pose_add(get_forward_kin(), pose_sub(p[-.100895358710, -.399447902864, -.109904714255, -.003451212682, -3.138299351321, -.000360953878], p[-.099537247807, -.399332435006, .353883256374, .002737994117, -3.138372942114, -.000848275479])), a=0.2, v=0.04)
      thread_flag_65 = 1
    end
    if (ForceNorm<2):
      global thread_handler_65=run Thread_if_65()
      while (thread_flag_65 == 0):
        if not(ForceNorm<2):
          kill thread_handler_65
          thread_flag_65 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_65 = 2
    end
    $ 67 "Move across the surface while applying 10N of force"
    $ 68 "'Use 'Motion' type UR Force Control with Y & Z compliance, only push in Z'"
    # 'Use "Motion" type UR Force Control with Y & Z compliance, only push in Z'
    $ 69 "Force"
    sleep(0.02)
    force_mode(tool_pose(), [0, 1, 1, 0, 0, 0], [0.0, 0.0, 10.0, 0.0, 0.0, 0.0], 3, [0.1, 0.15, 0.15, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
    $ 70 "MoveL" "noBreak"
    $ 71 "Wait: 1.0" "noBreak"
    sleep(1.0)
    $ 72 "(Optional IF) Stop if the tool encounters too much resistance or hits wall." "noBreak"
    $ 73 "If xyPlaneForce < 10" "noBreak"
    global thread_flag_73=0
    thread Thread_if_73():
      $ 74 "RelativeMotionY" "noBreak"
      movel(pose_add(get_forward_kin(), pose_sub(p[.436379622645, .579622290088, .355372356098, 3.139904977212, -.047154280323, -.005127828988], p[-.436359442327, .579695814351, .355249805337, 3.139879080663, -.047187252950, -.005446656779])), a=0.025, v=0.04)
      thread_flag_73 = 1
    end
    if (xyPlaneForce < 10):
      global thread_handler_73=run Thread_if_73()
      while (thread_flag_73 == 0):
        if not(xyPlaneForce < 10):
          kill thread_handler_73
          thread_flag_73 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_73 = 2
    end
    end_force_mode()
    stopl(5.0)
    $ 75 "Reset to a start position"
    $ 76 "MoveL"
    $ 77 "Up" "breakAfter"
    movel(pose_add(get_forward_kin(), pose_sub(p[-.436336185337, .579673257663, .343364995505, 3.139979842869, -.047175057684, -.005647957901], p[-.436390459671, .579650792013, .262908481914, 3.139937120188, -.046979815582, -.005524822520])), a=1.2, v=0.25)
    $ 79 "Start" "breakAfter"
    movel([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=1.2, v=0.25)
    $ 80 "Reset to a start position"
    $ 81 "MoveL"
    $ 82 "Start" "breakAfter"
    movel([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=1.2, v=0.25)
    $ 83 "METHOD 4"
    $ 84 "Move down until the tool touches a surface"
    $ 85 "'Monitor raw FT sensor readings (in sensor coordinate frame)'"
    # 'Monitor raw FT sensor readings (in sensor coordinate frame)'
    $ 86 "MoveL"
    $ 87 "If ATI_FT_Fz>-2"
    global thread_flag_87=0
    thread Thread_if_87():
      $ 88 "RelativeMotionZ" "breakAfter"
      movel(pose_add(get_forward_kin(), pose_sub(p[-.100895358710, -.399447902864, -.109904714255, -.003451212682, -3.138299351321, -.000360953878], p[-.099537247807, -.399332435006, .353883256374, .002737994117, -3.138372942114, -.000848275479])), a=0.2, v=0.04)
      thread_flag_87 = 1
    end
    if (ATI_FT_Fz>-2):
      global thread_handler_87=run Thread_if_87()
      while (thread_flag_87 == 0):
        if not(ATI_FT_Fz>-2):
          kill thread_handler_87
          thread_flag_87 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_87 = 2
    end
    $ 89 "Wait: 2.0"
    sleep(2.0)
    $ 90 "'(Optional) Insert a UR Force Mode command to move across the surface, as shown in Methods above.'"
    # '(Optional) Insert a UR Force Mode command to move across the surface, as shown in Methods above.'
    $ 91 "Reset to a start position"
    $ 92 "MoveL"
    $ 93 "Up" "breakAfter"
    movel(pose_add(get_forward_kin(), pose_sub(p[-.436336185337, .579673257663, .343364995505, 3.139979842869, -.047175057684, -.005647957901], p[-.436390459671, .579650792013, .262908481914, 3.139937120188, -.046979815582, -.005524822520])), a=0.4, v=0.15)
    $ 95 "Start" "breakAfter"
    movel([-1.078661623004158, -0.9978945013202827, 1.0202554552883374, -1.5932886623831717, 4.713208092856472, 0.522792698573941], a=0.4, v=0.15)
  end
end
